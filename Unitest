import unittest
from math import gcd
from TP09 import Fraction

class TestFraction(unittest.TestCase):

    def test_initialization(self):
        f = Fraction(2, 3)
        self.assertEqual(f.numerator, 2)
        self.assertEqual(f.denominator, 3)
        f1 = Fraction(0, 3)
        self.assertEqual(f1.numerator, 0)
        self.assertEqual(f1.denominator, 3)
        with self.assertRaises(ZeroDivisionError):
            Fraction(2, 0)
        with self.assertRaises(TypeError):
            Fraction(2.5, 3)
            Fraction("toto", 3)
            Fraction(2, "toto")


    def test_den_pas_negatif(self):
        f = Fraction(-2, -3)
        self.assertEqual(f.numerator, 2)
        self.assertEqual(f.denominator, 3)

        f1 = Fraction(2, -3)
        self.assertEqual(f1.numerator, -2)
        self.assertEqual(f1.denominator, 3)

    def test_reduce(self):
        f = Fraction(64, 128)
        f.reduce()
        self.assertEqual(f.numerator, 1)
        self.assertEqual(f.denominator, 2)

        f1 = Fraction(-64, 128)
        self.assertEqual(f1.numerator, -1)
        self.assertEqual(f1.denominator, 2)

        f2 = Fraction(0, 10)
        self.assertEqual(f2.numerator, 0)
        self.assertEqual(f2.denominator, 10)

        f3 = Fraction(1,10 )
        self.assertEqual(f3.numerator, 1)
        self.assertEqual(f3.denominator, 10)

    def test_str(self):
        f = Fraction(2, 3)
        self.assertEqual(str(f), "2/3")
        f1 = Fraction(-2, 3)
        self.assertEqual(str(f), "-2/3")
        f2 = Fraction(0, 3)
        self.assertEqual(str(f), "0/3")

    def test_as_mixed_number(self):
        f = Fraction(7, 3)
        self.assertEqual(f.as_mixed_number(), "2 1/3")
        f1 = Fraction(-7, 3)
        self.assertEqual(f1.as_mixed_number(), "-2 1/3")
        f2 = Fraction(3, 3)
        self.assertEqual(f2.as_mixed_number(), "1")
        f3 = Fraction(1,2)
        self.assertEqual(f3.as_mixed_number(), "1/2")

    def test_add(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(1, 3)
        result = f1 + f2
        self.assertEqual(result.numerator, 5)
        self.assertEqual(result.denominator, 6)

        f3 = Fraction(-1, 3)
        result1 = f1 + f3
        self.assertEqual(result1.numerator, 1)
        self.assertEqual(result1.denominator, 6)

        f4 = Fraction(0, 3)
        result2 = f1 + f4
        self.assertEqual(result2.numerator, 1)
        self.assertEqual(result2.denominator, 2)

    def test_sub(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(1, 3)
        result = f1 - f2
        self.assertEqual(result.numerator, -1)
        self.assertEqual(result.denominator, 6)

        f3 = Fraction(-1, 3)
        result1 = f1 - f3
        self.assertEqual(result1.numerator, 5)
        self.assertEqual(result1.denominator, 6)

        f4 = Fraction(0, 3)
        result2 = f1 - f4
        self.assertEqual(result2.numerator, 1)
        self.assertEqual(result2.denominator, 2)

    def test_mul(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(1, 3)
        result = f1 * f2
        self.assertEqual(result.numerator, 1)
        self.assertEqual(result.denominator, 6)

        f3 = Fraction(-1, 3)
        result1 = f1 * f3
        self.assertEqual(result1.numerator, -1)
        self.assertEqual(result1.denominator, 6)

        f4 = Fraction(0, 3)
        result2 = f1 * f4
        self.assertEqual(result2.numerator, 0)
        self.assertEqual(result2.denominator, 6)

    def test_truediv(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(1, 3)
        result = f1 / f2
        self.assertEqual(result.numerator, 3)
        self.assertEqual(result.denominator, 2)

        f3 = Fraction(-1, 3)
        result1 = f1 / f3
        self.assertEqual(result1.numerator, -1)
        self.assertEqual(result1.denominator, 6)

        with self.assertRaises(ZeroDivisionError):
            f4 = Fraction(0, 3)



    def test_pow(self):
        f = Fraction(1, 2)
        self.assertEqual((f ** 2).numerator, 1)
        self.assertEqual((f ** 2).denominator, 4)

        self.assertEqual((f ** -1).numerator, 4)
        self.assertEqual((f ** -1).denominator, 2)

        self.assertEqual((f ** 0).numerator, 1)
        self.assertEqual((f ** 0).denominator, 1)

        with self.assertRaises(ValueError):
            Fraction(0, 1) ** -1

    def test_eq(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(2, 4)
        self.assertTrue(f1 == f2)

        f3 = Fraction(-2, 4)
        self.assertFalse(f1 == f3)

        self.assertTrue(f1 == Fraction(0, 2))

    def test_float(self):
        f = Fraction(1, 2)
        self.assertEqual(float(f), 0.5)

        f1 = Fraction(-1, 2)
        self.assertEqual(float(f1), -0.5)

        f2 = Fraction(0, 2)
        self.assertEqual(float(f2), 0)

    def test_is_zero(self):
        f = Fraction(1, 2)
        self.assertTrue(f.is_zero())
        f1 = Fraction(-1, 2)
        self.assertFalse(f1.is_zero())
        f2 = Fraction(0, 2)
        self.assertFalse(f2.is_zero())

    def test_is_integer(self):
        f = Fraction(4, 2)
        self.assertTrue(f.is_integer())
        f1 = Fraction(3,2)
        self.assertFalse(f1.is_integer())
        f2 = Fraction(-4, 2)
        self.assertFalse(f2.is_integer())
        f3 = Fraction(0,2)
        self.assertFalse(f3.is_integer())

    def test_is_proper(self):
        f = Fraction(1, 2)
        self.assertTrue(f.is_proper())
        f1 = Fraction(6, 2)
        self.assertFalse(f1.is_proper())
        f2 = Fraction(-1, 2)
        self.assertFalse(f2.is_proper())
        f3 = Fraction(0, 2)
        self.assertFalse(f3.is_proper())

    def test_is_unit(self):
        f = Fraction(1, 2)
        self.assertTrue(f.is_unit())
        f1 = Fraction(2, 3)
        self.assertFalse(f1.is_unit())
        f2 = Fraction(64, 128)
        self.assertFalse(f2.is_unit())
        f3 = Fraction(-1, 2)
        self.assertFalse(f3.is_proper())
        f4 = Fraction(0, 2)
        self.assertFalse(f4.is_proper())

    def test_is_adjacent_to(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(2, 3)
        self.assertTrue(f1.is_adjacent_to(Fraction(1, 3)))
        self.assertFalse(f1.is_adjacent_to(Fraction(1, 4)))

        with self.assertRaises(TypeError):
            f1.is_adjacent_to(5)

if __name__ == "__main__":
    unittest.main()
